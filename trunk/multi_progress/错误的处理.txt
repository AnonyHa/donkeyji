1、简单的操作，例如赋值、计算、memset等等，不用考虑出错。一些内存分配、文件读取/创建等操作，需要考虑出错，看这种错误出现在何种情况下，能修复就修复，不能修复就挂掉。在初始化期间的错误，直接exit，运行期间的错误，如果能修复就修复，不能修复的严重错误，也只能挂掉了。

2、模块初始化函数***_init()一般用void返回值，如果在***_init()中出错，一般可以直接exit()退出进程，因为这些属于致命的严重错误，需要马上挂掉以便修改。可以参考nginx的实现。

3、运行期间的一些错误就需要进行错误处理了，这个时候就不能随意exit()。

4、p = malloc()等分配内存的函数，需要检查if (p == NULL)，nginx中是这么做的。为什么在lighttpd中有点的地方根本不检查malloc返回NULL，有点地方采用assert(p)的方式，有的地方也检查了malloc返回为NULL的情况??
PS: assert是调试模式下起作用，当定义了NDEBUG宏时assert()就不起作用了。

5、在main()中，return的地方，我觉得无需去清理进程资源，让OS去做这个吧。nginx中，main()中return的地方就没有做资源清理，顶多打一个log；而lighttpd中，有的地方也是直接return，有的则又进行资源的清理。

6、内存管理：所有的struct都用指针管理，如
struct a{};
struct a* a_init()
{}


void a_free(struct a* pa)
{
	free(pa);
}

struct b{
	struct a* pa;
};
struct b* b_init()
{
	pb = malloc();
	pb->pa = a_init();//初始化都为空
	return pb;
}

void b_free(struct b* pb)
{
	a_free(pb->pa);
	free(pb);	
}
在*_init()中的错误如何处理呢?
如pb->pa = a_init();这里如何保证不为NULL呢?

