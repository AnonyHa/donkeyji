// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ptos/s_buy_item.proto

#ifndef PROTOBUF_ptos_2fs_5fbuy_5fitem_2eproto__INCLUDED
#define PROTOBUF_ptos_2fs_5fbuy_5fitem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ptos_2fs_5fbuy_5fitem_2eproto();
void protobuf_AssignDesc_ptos_2fs_5fbuy_5fitem_2eproto();
void protobuf_ShutdownFile_ptos_2fs_5fbuy_5fitem_2eproto();

class s_buy_item;
class s_buy_item_PhoneNumber;

enum s_buy_item_PhoneType {
  s_buy_item_PhoneType_MOBILE = 0,
  s_buy_item_PhoneType_HOME = 1,
  s_buy_item_PhoneType_WORK = 2
};
bool s_buy_item_PhoneType_IsValid(int value);
const s_buy_item_PhoneType s_buy_item_PhoneType_PhoneType_MIN = s_buy_item_PhoneType_MOBILE;
const s_buy_item_PhoneType s_buy_item_PhoneType_PhoneType_MAX = s_buy_item_PhoneType_WORK;
const int s_buy_item_PhoneType_PhoneType_ARRAYSIZE = s_buy_item_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* s_buy_item_PhoneType_descriptor();
inline const ::std::string& s_buy_item_PhoneType_Name(s_buy_item_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    s_buy_item_PhoneType_descriptor(), value);
}
inline bool s_buy_item_PhoneType_Parse(
    const ::std::string& name, s_buy_item_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<s_buy_item_PhoneType>(
    s_buy_item_PhoneType_descriptor(), name, value);
}
// ===================================================================

class s_buy_item_PhoneNumber : public ::google::protobuf::Message {
 public:
  s_buy_item_PhoneNumber();
  virtual ~s_buy_item_PhoneNumber();
  
  s_buy_item_PhoneNumber(const s_buy_item_PhoneNumber& from);
  
  inline s_buy_item_PhoneNumber& operator=(const s_buy_item_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_buy_item_PhoneNumber& default_instance();
  
  void Swap(s_buy_item_PhoneNumber* other);
  
  // implements Message ----------------------------------------------
  
  s_buy_item_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_buy_item_PhoneNumber& from);
  void MergeFrom(const s_buy_item_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  
  // optional .s_buy_item.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::s_buy_item_PhoneType type() const;
  inline void set_type(::s_buy_item_PhoneType value);
  
  // @@protoc_insertion_point(class_scope:s_buy_item.PhoneNumber)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* number_;
  static const ::std::string _default_number_;
  int type_;
  friend void  protobuf_AddDesc_ptos_2fs_5fbuy_5fitem_2eproto();
  friend void protobuf_AssignDesc_ptos_2fs_5fbuy_5fitem_2eproto();
  friend void protobuf_ShutdownFile_ptos_2fs_5fbuy_5fitem_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static s_buy_item_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class s_buy_item : public ::google::protobuf::Message {
 public:
  s_buy_item();
  virtual ~s_buy_item();
  
  s_buy_item(const s_buy_item& from);
  
  inline s_buy_item& operator=(const s_buy_item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_buy_item& default_instance();
  
  void Swap(s_buy_item* other);
  
  // implements Message ----------------------------------------------
  
  s_buy_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_buy_item& from);
  void MergeFrom(const s_buy_item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef s_buy_item_PhoneNumber PhoneNumber;
  
  typedef s_buy_item_PhoneType PhoneType;
  static const PhoneType MOBILE = s_buy_item_PhoneType_MOBILE;
  static const PhoneType HOME = s_buy_item_PhoneType_HOME;
  static const PhoneType WORK = s_buy_item_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return s_buy_item_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    s_buy_item_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    s_buy_item_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    s_buy_item_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return s_buy_item_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return s_buy_item_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return s_buy_item_PhoneType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  // repeated .s_buy_item.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::s_buy_item_PhoneNumber& phone(int index) const;
  inline ::s_buy_item_PhoneNumber* mutable_phone(int index);
  inline ::s_buy_item_PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::s_buy_item_PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::s_buy_item_PhoneNumber >*
      mutable_phone();
  
  // @@protoc_insertion_point(class_scope:s_buy_item)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 id_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  ::google::protobuf::RepeatedPtrField< ::s_buy_item_PhoneNumber > phone_;
  friend void  protobuf_AddDesc_ptos_2fs_5fbuy_5fitem_2eproto();
  friend void protobuf_AssignDesc_ptos_2fs_5fbuy_5fitem_2eproto();
  friend void protobuf_ShutdownFile_ptos_2fs_5fbuy_5fitem_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static s_buy_item* default_instance_;
};
// ===================================================================


// ===================================================================

// s_buy_item_PhoneNumber

// required string number = 1;
inline bool s_buy_item_PhoneNumber::has_number() const {
  return _has_bit(0);
}
inline void s_buy_item_PhoneNumber::clear_number() {
  if (number_ != &_default_number_) {
    number_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& s_buy_item_PhoneNumber::number() const {
  return *number_;
}
inline void s_buy_item_PhoneNumber::set_number(const ::std::string& value) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void s_buy_item_PhoneNumber::set_number(const char* value) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void s_buy_item_PhoneNumber::set_number(const char* value, size_t size) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_buy_item_PhoneNumber::mutable_number() {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  return number_;
}

// optional .s_buy_item.PhoneType type = 2 [default = HOME];
inline bool s_buy_item_PhoneNumber::has_type() const {
  return _has_bit(1);
}
inline void s_buy_item_PhoneNumber::clear_type() {
  type_ = 1;
  _clear_bit(1);
}
inline ::s_buy_item_PhoneType s_buy_item_PhoneNumber::type() const {
  return static_cast< ::s_buy_item_PhoneType >(type_);
}
inline void s_buy_item_PhoneNumber::set_type(::s_buy_item_PhoneType value) {
  GOOGLE_DCHECK(::s_buy_item_PhoneType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// s_buy_item

// required string name = 1;
inline bool s_buy_item::has_name() const {
  return _has_bit(0);
}
inline void s_buy_item::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& s_buy_item::name() const {
  return *name_;
}
inline void s_buy_item::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_buy_item::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_buy_item::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_buy_item::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required int32 id = 2;
inline bool s_buy_item::has_id() const {
  return _has_bit(1);
}
inline void s_buy_item::clear_id() {
  id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 s_buy_item::id() const {
  return id_;
}
inline void s_buy_item::set_id(::google::protobuf::int32 value) {
  _set_bit(1);
  id_ = value;
}

// optional string email = 3;
inline bool s_buy_item::has_email() const {
  return _has_bit(2);
}
inline void s_buy_item::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& s_buy_item::email() const {
  return *email_;
}
inline void s_buy_item::set_email(const ::std::string& value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void s_buy_item::set_email(const char* value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void s_buy_item::set_email(const char* value, size_t size) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_buy_item::mutable_email() {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// repeated .s_buy_item.PhoneNumber phone = 4;
inline int s_buy_item::phone_size() const {
  return phone_.size();
}
inline void s_buy_item::clear_phone() {
  phone_.Clear();
}
inline const ::s_buy_item_PhoneNumber& s_buy_item::phone(int index) const {
  return phone_.Get(index);
}
inline ::s_buy_item_PhoneNumber* s_buy_item::mutable_phone(int index) {
  return phone_.Mutable(index);
}
inline ::s_buy_item_PhoneNumber* s_buy_item::add_phone() {
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s_buy_item_PhoneNumber >&
s_buy_item::phone() const {
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::s_buy_item_PhoneNumber >*
s_buy_item::mutable_phone() {
  return &phone_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::s_buy_item_PhoneType>() {
  return ::s_buy_item_PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ptos_2fs_5fbuy_5fitem_2eproto__INCLUDED
